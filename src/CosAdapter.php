<?php
/**
 * Created by PhpStorm.
 * User: Liu
 * Date: 12/20/2018
 * Time: 9:52 PM
 */

namespace Liukaho\Flysystem\Cos;

use League\Flysystem\Adapter\AbstractAdapter;
use League\Flysystem\Adapter\CanOverwriteFiles;
use League\Flysystem\AdapterInterface;
use League\Flysystem\Config;
use League\Flysystem\Util;
use Qcloud\Cos\Client;

class CosAdapter extends AbstractAdapter implements AdapterInterface
{

    protected $cos_client;

    protected $bucket;

    protected $config;

    protected static $metaOptions = [
        'CacheControl',
        'ContentDisposition',
        'ContentEncoding',
        'ContentLanguage',
        'ContentLength',
        'ContentType',
        'Expires',
        'GrantFullControl',
        'GrantRead',
        'GrantWrite',
        'Metadata',
        'StorageClass'
    ];

    public function __construct(string $region, string $secretId, string $secretKey, string $bucket = '', string $prefix = '', string $token = '', array $option = array())
    {
        $this->bucket = $bucket;
        $config['region'] = $region;
        $credentials['secretId'] = $secretId;
        $credentials['secretKey'] = $secretKey;
        if (!empty($token)){
            $credentials['token'] = $token;
        }
        $config['credentials'] = $credentials;
        $this->config = array_merge($config, $option);
        $this->setPathPrefix($prefix);
    }



    public function setBucket(string $bucket)
    {
        $this->bucket = $bucket;
    }

    public function getBucket() : string
    {
        return $this->bucket;
    }

    public function getRegion()
    {
        return $this->config['region'];
    }

    public function getKey($path) : string
    {
        return $this->applyPathPrefix($path);
    }

    public function getClient()
    {
        return $this->cos_client ?? new Client($this->config);
    }



    public function read($path)
    {
        // TODO: Implement read() method.
    }

    public function getTimestamp($path)
    {
        return $this->getMetadata($path)['LastModified'];
    }

    public function getMetadata($path)
    {
        $param['Bucket'] = $this->getBucket();
        $param['Key'] = $this->getKey($path);
        return $this->getClient()->headObject($param)->toArray();
    }

    public function applyPathPrefix($path)
    {
        return ltrim(parent::applyPathPrefix($path), '/'); // TODO: Change the autogenerated stub
    }

    public function copy($path, $newpath)
    {
        $source = $this->getSource($this->getKey($path));
        return boolval($this->getClient()->Copy($this->getBucket(), $this->getKey($newpath), $source));
    }

    public function createDir($dirname, Config $config)
    {
        // TODO: Implement createDir() method.
    }

    public function delete($path)
    {
        $param['Bucket'] = $this->getBucket();
        $param['Key'] = $path;
        $this->getClient()->deleteObject($param);

        return !$this->has($path);
    }

    public function deleteDir($dirname)
    {
        // TODO: Implement deleteDir() method.
    }

    public function getMimetype($path)
    {
        // TODO: Implement getMimetype() method.
    }

    public function getPathPrefix()
    {
        return parent::getPathPrefix(); // TODO: Change the autogenerated stub
    }

    public function getSize($path)
    {
        // TODO: Implement getSize() method.
    }

    public function getVisibility($path)
    {
        // TODO: Implement getVisibility() method.
    }

    public function has($path)
    {
        return $this->getClient()->doesObjectExist($this->getBucket(), $path);
    }

    public function listContents($directory = '', $recursive = false)
    {
        // TODO: Implement listContents() method.
    }

    public function readStream($path)
    {
        // TODO: Implement readStream() method.
    }

    public function removePathPrefix($path)
    {
        return parent::removePathPrefix($path); // TODO: Change the autogenerated stub
    }

    public function rename($path, $newpath)
    {
        if($this->copy($path, $newpath)){
            return $this->delete($path);
        }
        return false;
    }

    public function setPathPrefix($prefix)
    {
        $prefix = ltrim($prefix, '/');
        return parent::setPathPrefix($prefix); // TODO: Change the autogenerated stub
    }

    public function setVisibility($path, $visibility)
    {
        // TODO: Implement setVisibility() method.
    }

    public function update($path, $contents, Config $config)
    {
        return $this->upload($path, $contents, $config);
    }

    public function updateStream($path, $resource, Config $config)
    {
        return $this->upload($path, $resource, $config);
    }

    /**
     *
     * upload the content
     *
     * @param string $path
     * @param string $contents
     * @param Config $config
     * @return array|false|\Guzzle\Http\Url|string
     */
    public function write($path, $contents, Config $config)
    {
        return $this->upload($path, $contents, $config);
    }

    public function writeStream($path, $resource, Config $config)
    {
        return $this->upload($path, $resource, $config);
    }

    /**
     * @return string
     */
    public function getPathSeparator()
    {
        return $this->pathSeparator;
    }

    /**
     * @param string $pathSeparator
     */
    public function setPathSeparator($pathSeparator)
    {
        $this->pathSeparator = $pathSeparator;
    }

    /**
     *
     * get the source
     *
     * @param $path
     * @return string
     */
    public function getSource($path) : string
    {
        return sprintf("%s.cos.%s.myqcloud.com/%s", $this->getBucket(), $this->getRegion(), $path);
    }

    /**
     *
     * upload the content
     *
     *
     * @param $path
     * @param $contents
     * @param Config $config
     * @return \Guzzle\Http\Url|string
     */

    protected function upload($path, $contents, Config $config)
    {
        $option = $this->getOptionFromConfig($config);
        $key = $this->getKey($path);
        $this->getClient()->upload(
            $this->getBucket(),
            $key,
            $contents,
            $option
        );

        return $this->getClient()->getObjectUrl($this->getBucket(), $key);
    }

    /**
     *
     * get option from config
     *
     * @param Config $config
     *
     * @return array
     */
    protected function getOptionFromConfig(Config $config) : array
    {
        $options = array();

        foreach(static::$metaOptions as $key) {
            if($config->has($key)){
                $options[$key] = $config->get($key);
            }
        }

        return $options;
    }
}