<?php
/**
 * Created by PhpStorm.
 * User: Liu
 * Date: 12/20/2018
 * Time: 9:52 PM
 */

namespace Liukaho\Flysystem\Cos;

use League\Flysystem\Adapter\AbstractAdapter;
use League\Flysystem\Adapter\CanOverwriteFiles;
use League\Flysystem\AdapterInterface;
use League\Flysystem\Config;
use League\Flysystem\Util;
use Qcloud\Cos\Client;

class CosAdapter extends AbstractAdapter implements AdapterInterface
{

    protected $cos_client;

    protected $bucket;

    public function __construct(string $region, string $secretId, string $secretKey, string $bucket = '')
    {
        $this->bucket = $bucket;
        $config['region'] = $region;
        $credentials['secretId'] = $secretId;
        $credentials['secretKey'] = $secretKey;
        $config['credentials'] = $credentials;
        $this->cos_client = new Client($config);
    }

    public function setBucket(string $bucket)
    {
        $this->bucket = $bucket;
    }

    public function getBucket() : string
    {
        return $this->bucket;
    }

    public function getClient()
    {
        return $this->cos_client;
    }

    public function upload()
    {
    }

    public function read($path)
    {
        // TODO: Implement read() method.
    }

    public function getTimestamp($path)
    {
        // TODO: Implement getTimestamp() method.
    }

    public function applyPathPrefix($path)
    {
        return parent::applyPathPrefix($path); // TODO: Change the autogenerated stub
    }

    public function copy($path, $newpath)
    {
        // TODO: Implement copy() method.
    }

    public function createDir($dirname, Config $config)
    {
        // TODO: Implement createDir() method.
    }

    public function delete($path)
    {
        // TODO: Implement delete() method.
    }

    public function deleteDir($dirname)
    {
        // TODO: Implement deleteDir() method.
    }

    public function getMetadata($path)
    {
        // TODO: Implement getMetadata() method.
    }

    public function getMimetype($path)
    {
        // TODO: Implement getMimetype() method.
    }

    public function getPathPrefix()
    {
        return parent::getPathPrefix(); // TODO: Change the autogenerated stub
    }

    public function getSize($path)
    {
        // TODO: Implement getSize() method.
    }

    public function getVisibility($path)
    {
        // TODO: Implement getVisibility() method.
    }

    public function has($path)
    {
        // TODO: Implement has() method.
    }

    public function listContents($directory = '', $recursive = false)
    {
        // TODO: Implement listContents() method.
    }

    public function readStream($path)
    {
        // TODO: Implement readStream() method.
    }

    public function removePathPrefix($path)
    {
        return parent::removePathPrefix($path); // TODO: Change the autogenerated stub
    }

    public function rename($path, $newpath)
    {
        // TODO: Implement rename() method.
    }

    public function setPathPrefix($prefix)
    {
        return parent::setPathPrefix($prefix); // TODO: Change the autogenerated stub
    }

    public function setVisibility($path, $visibility)
    {
        // TODO: Implement setVisibility() method.
    }

    public function update($path, $contents, Config $config)
    {
        // TODO: Implement update() method.
    }

    public function updateStream($path, $resource, Config $config)
    {
        // TODO: Implement updateStream() method.
    }

    public function write($path, $contents, Config $config)
    {
        // TODO: Implement write() method.
    }

    public function writeStream($path, $resource, Config $config)
    {
        // TODO: Implement writeStream() method.
    }

    /**
     * @return string
     */
    public function getPathSeparator()
    {
        return $this->pathSeparator;
    }

    /**
     * @param string $pathSeparator
     */
    public function setPathSeparator($pathSeparator)
    {
        $this->pathSeparator = $pathSeparator;
    }
}